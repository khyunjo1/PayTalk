import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useNewAuth } from '../../../hooks/useNewAuth';
import { getStoreOrders } from '../../../lib/orderApi';
import { getStores } from '../../../lib/storeApi';
import Header from '../../../components/Header';

interface Order {
  id: string;
  user_id?: string;
  store_id: string;
  order_type: 'delivery' | 'pickup';
  delivery_address?: string;
  delivery_time?: string;
  pickup_time?: string;
  special_requests?: string;
  depositor_name?: string;
  customer_name?: string;
  customer_phone?: string;
  customer_address?: string;
  subtotal: number;
  total: number;
  status: '입금대기' | '입금확인' | '배달완료' | '주문취소';
  created_at: string;
  updated_at: string;
  order_items?: Array<{
    id: string;
    menu_id: string;
    quantity: number;
    price: number;
    menus: {
      id: string;
      name: string;
    };
  }>;
}

export default function AdminAnalytics() {
  const navigate = useNavigate();
  const { storeId } = useParams<{ storeId: string }>();
  const { user, loading } = useNewAuth();
  const [orders, setOrders] = useState<Order[]>([]);
  const [ordersLoading, setOrdersLoading] = useState(true);
  const [storeName, setStoreName] = useState('');
  const [selectedPeriod, setSelectedPeriod] = useState<'today' | 'yesterday' | 'custom'>('today');
  const [selectedDate, setSelectedDate] = useState('');
  const [showPeriodDropdown, setShowPeriodDropdown] = useState(false);

  useEffect(() => {
    if (!loading && !user) {
      navigate('/admin-login');
      return;
    }

    if (!loading && user && user.role !== 'admin') {
      navigate('/admin-dashboard');
      return;
    }

    if (storeId) {
      loadOrders();
      loadStoreName();
    }
  }, [user, loading, navigate, storeId]);

  const loadOrders = async () => {
    if (!storeId) return;
    
    try {
      setOrdersLoading(true);
      const ordersData = await getStoreOrders(storeId);
      setOrders(ordersData);
    } catch (error) {
      console.error('주문 로드 실패:', error);
    } finally {
      setOrdersLoading(false);
    }
  };

  const loadStoreName = async () => {
    if (!storeId) return;
    
    try {
      const stores = await getStores();
      const store = stores.find(s => s.id === storeId);
      if (store) {
        setStoreName(store.name);
      }
    } catch (error) {
      console.error('매장명 로드 실패:', error);
    }
  };

  const handlePeriodSelect = (period: 'today' | 'yesterday' | 'custom') => {
    setSelectedPeriod(period);
    if (period !== 'custom') {
      setSelectedDate('');
    }
  };

  const handleDateSelect = (date: string) => {
    setSelectedDate(date);
    if (date) {
      setSelectedPeriod('custom');
    }
  };

  const filterOrdersByPeriod = (orders: Order[]) => {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    switch (selectedPeriod) {
      case 'today':
        return orders.filter(order => {
          const orderDate = new Date(order.created_at);
          return orderDate >= today;
        });
      case 'yesterday':
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        return orders.filter(order => {
          const orderDate = new Date(order.created_at);
          return orderDate >= yesterday && orderDate < today;
        });
      case 'custom':
        if (!selectedDate) return orders;
        const customDate = new Date(selectedDate);
        const nextDay = new Date(customDate);
        nextDay.setDate(nextDay.getDate() + 1);
        return orders.filter(order => {
          const orderDate = new Date(order.created_at);
          return orderDate >= customDate && orderDate < nextDay;
        });
      default:
        return orders;
    }
  };

  const getPeriodTitle = (title: string) => {
    const periodLabel = selectedPeriod === 'today' ? '오늘' : 
                       selectedPeriod === 'yesterday' ? '어제' : 
                       selectedPeriod === 'custom' ? (selectedDate ? new Date(selectedDate).toLocaleDateString('ko-KR') : '날짜 선택') : '오늘';
    return `${periodLabel} ${title}`;
  };

  const calculateStatistics = (orders: Order[], period: string) => {
    const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0);
    const totalOrders = orders.length;
    const averageOrderValue = totalOrders > 0 ? Math.round(totalRevenue / totalOrders) : 0;
    
    // 이전 기간과 비교하여 매출 증가율 계산
    let previousPeriodRevenue = 0;
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    switch (period) {
      case 'today':
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        previousPeriodRevenue = orders.filter(order => {
          const orderDate = new Date(order.created_at);
          return orderDate >= yesterday && orderDate < today;
        }).reduce((sum, order) => sum + order.total, 0);
        break;
      case 'yesterday':
        const dayBeforeYesterday = new Date(today);
        dayBeforeYesterday.setDate(dayBeforeYesterday.getDate() - 2);
        previousPeriodRevenue = orders.filter(order => {
          const orderDate = new Date(order.created_at);
          return orderDate >= dayBeforeYesterday && orderDate < yesterday;
        }).reduce((sum, order) => sum + order.total, 0);
        break;
      default:
        previousPeriodRevenue = 0;
    }
    
    const revenueGrowthRate = previousPeriodRevenue > 0 
      ? Math.round(((totalRevenue - previousPeriodRevenue) / previousPeriodRevenue) * 100)
      : 0;
    
    return {
      totalRevenue,
      totalOrders,
      averageOrderValue,
      revenueGrowthRate
    };
  };

  const getPickupTimeAnalysis = (orders: Order[]) => {
    const pickupOrders = orders.filter(order => order.order_type === 'pickup');
    
    // 픽업 시간대별로 그룹화
    const timeSlots: { [key: string]: number } = {};
    
    pickupOrders.forEach(order => {
      if (order.pickup_time) {
        const timeSlot = order.pickup_time;
        timeSlots[timeSlot] = (timeSlots[timeSlot] || 0) + 1;
      }
    });
    
    return Object.entries(timeSlots)
      .map(([time, orders]) => ({ time, orders }))
      .sort((a, b) => a.time.localeCompare(b.time));
  };

  const getDeliveryTimeAnalysis = (orders: Order[]) => {
    const deliveryOrders = orders.filter(order => order.order_type === 'delivery');
    
    // 배달 시간대별로 그룹화
    const timeSlots: { [key: string]: number } = {};
    
    deliveryOrders.forEach(order => {
      if (order.delivery_time) {
        const timeSlot = order.delivery_time;
        timeSlots[timeSlot] = (timeSlots[timeSlot] || 0) + 1;
      }
    });
    
    return Object.entries(timeSlots)
      .map(([time, orders]) => ({ time, orders }))
      .sort((a, b) => a.time.localeCompare(b.time));
  };

  const getWeeklyAnalysis = (orders: Order[]) => {
    const days = ['일', '월', '화', '수', '목', '금', '토'];
    
    return days.map((dayName, dayIndex) => {
      const dayOrders = orders.filter(order => {
        const orderDay = new Date(order.created_at).getDay();
        return orderDay === dayIndex;
      });
      
      const revenue = dayOrders.reduce((sum, order) => sum + order.total, 0);
      
      return {
        name: dayName,
        orders: dayOrders.length,
        revenue
      };
    });
  };

  const filteredOrdersByPeriod = filterOrdersByPeriod(orders);

  // 인기 메뉴 계산
  const popularMenus = (() => {
    const menuCounts: { [key: string]: { name: string; count: number } } = {};
    
    filteredOrdersByPeriod.forEach(order => {
      if (order.order_items) {
        order.order_items.forEach(item => {
          const menuName = item.menus.name;
          if (!menuCounts[menuName]) {
            menuCounts[menuName] = { name: menuName, count: 0 };
          }
          menuCounts[menuName].count += item.quantity;
        });
      }
    });
    
    return Object.values(menuCounts)
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);
  })();

  const handleLogout = () => {
    const { logout } = useNewAuth();
    logout();
    navigate('/admin-login');
  };

  if (loading || ordersLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4"></div>
          <p className="text-gray-600">로딩 중...</p>
        </div>
      </div>
    );
  }

  if (!user || user.role !== 'admin') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
            <i className="ri-lock-line text-2xl text-red-600"></i>
          </div>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">접근 권한이 없습니다</h2>
          <p className="text-gray-600">관리자만 접근할 수 있습니다.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <div className="flex flex-col">
        {/* 헤더 */}
        <div className="bg-white shadow-sm border-b">
          <div className="px-4 py-4">
            <div className="flex items-center justify-between">
            <div className="flex items-center">
              <button
                onClick={() => navigate('/admin-dashboard')}
                className="mr-3 p-2 hover:bg-gray-100 rounded-lg transition-colors"
                title="뒤로가기"
              >
                <i className="ri-arrow-left-line text-xl text-gray-600"></i>
              </button>
              <h1 className="text-lg font-semibold text-gray-800">
                {storeName ? `${storeName} 관리자` : '매장 관리자'}
              </h1>
            </div>
            <div className="flex items-center gap-3">
              <button
                onClick={handleLogout}
                className="bg-red-500 hover:bg-red-600 text-white px-3 py-1.5 rounded-md flex items-center whitespace-nowrap cursor-pointer text-sm"
              >
                <i className="ri-logout-box-r-line mr-1.5 text-xs"></i>
                로그아웃
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="p-4 flex-1">
        {/* 통계 탭 */}
        <div className="mb-4">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold text-gray-800 mb-2">성과분석</h3>
              <p className="text-sm text-gray-600">매장의 성과를 상세하게 분석할 수 있습니다</p>
            </div>
          </div>
        </div>

        {/* 기간 필터 */}
        <div className="bg-white rounded-lg border border-gray-200 p-4 shadow-sm mb-6">
          <div className="flex items-center gap-2 mb-3">
            <i className="ri-calendar-line text-orange-500"></i>
            <span className="text-sm font-medium text-gray-700">기간 선택</span>
          </div>
          
          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2 min-w-0">
              <i className="ri-calendar-line text-gray-500 text-sm"></i>
              <span className="text-sm font-medium text-gray-700 whitespace-nowrap">기간:</span>
            </div>
            
            <div className="flex-1">
              <div className="relative period-dropdown-container">
                <button
                  onClick={() => setShowPeriodDropdown(!showPeriodDropdown)}
                  className="w-full px-4 py-3 bg-white border border-gray-300 rounded-xl text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 cursor-pointer transition-all duration-200 hover:border-gray-400 flex items-center justify-between"
                >
                  <span>
                    {selectedPeriod === 'today' ? '오늘' : 
                     selectedPeriod === 'yesterday' ? '어제' : 
                     selectedPeriod === 'custom' ? '날짜 선택' : '오늘'}
                  </span>
                  <i className={`ri-arrow-down-s-line text-gray-400 text-sm transition-transform duration-200 ${showPeriodDropdown ? 'rotate-180' : ''}`}></i>
                </button>
                
                {showPeriodDropdown && (
                  <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-xl shadow-lg z-20 overflow-hidden">
                    <button
                      onClick={() => {
                        handlePeriodSelect('today');
                        setShowPeriodDropdown(false);
                      }}
                      className={`w-full px-4 py-3 text-left text-sm font-medium transition-colors duration-200 hover:bg-gray-50 ${
                        selectedPeriod === 'today' ? 'bg-orange-50 text-orange-600' : 'text-gray-700'
                      }`}
                    >
                      오늘
                    </button>
                    <button
                      onClick={() => {
                        handlePeriodSelect('yesterday');
                        setShowPeriodDropdown(false);
                      }}
                      className={`w-full px-4 py-3 text-left text-sm font-medium transition-colors duration-200 hover:bg-gray-50 ${
                        selectedPeriod === 'yesterday' ? 'bg-orange-50 text-orange-600' : 'text-gray-700'
                      }`}
                    >
                      어제
                    </button>
                    <button
                      onClick={() => {
                        handlePeriodSelect('custom');
                        setShowPeriodDropdown(false);
                      }}
                      className={`w-full px-4 py-3 text-left text-sm font-medium transition-colors duration-200 hover:bg-gray-50 ${
                        selectedPeriod === 'custom' ? 'bg-orange-50 text-orange-600' : 'text-gray-700'
                      }`}
                    >
                      날짜 선택
                    </button>
                  </div>
                )}
              </div>
            </div>

            {selectedPeriod === 'custom' && (
              <div className="flex-1">
                <input
                  type="date"
                  value={selectedDate || ''}
                  onChange={(e) => handleDateSelect(e.target.value)}
                  className="w-full px-4 py-3 bg-gray-50 border-0 rounded-xl text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:bg-white transition-all duration-200 hover:bg-gray-100"
                  placeholder="날짜를 선택하세요"
                />
              </div>
            )}
          </div>
        </div>

        {/* 통계 카드 */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-medium text-gray-600">{getPeriodTitle('총 매출')}</p>
                <p className="text-lg font-bold text-green-600">{calculateStatistics(filteredOrdersByPeriod, selectedPeriod).totalRevenue.toLocaleString()}원</p>
              </div>
              <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                <i className="ri-money-dollar-circle-line text-green-600"></i>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-medium text-gray-600">{getPeriodTitle('총 주문수')}</p>
                <p className="text-lg font-bold text-blue-600">{calculateStatistics(filteredOrdersByPeriod, selectedPeriod).totalOrders.toLocaleString()}</p>
              </div>
              <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                <i className="ri-shopping-cart-line text-blue-600"></i>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-medium text-gray-600">{getPeriodTitle('평균 주문액')}</p>
                <p className="text-lg font-bold text-purple-600">{calculateStatistics(filteredOrdersByPeriod, selectedPeriod).averageOrderValue.toLocaleString()}원</p>
              </div>
              <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                <i className="ri-bar-chart-line text-purple-600"></i>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs font-medium text-gray-600">{getPeriodTitle('매출 증가율')}</p>
                <p className={`text-lg font-bold ${calculateStatistics(filteredOrdersByPeriod, selectedPeriod).revenueGrowthRate >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {calculateStatistics(filteredOrdersByPeriod, selectedPeriod).revenueGrowthRate >= 0 ? '+' : ''}{calculateStatistics(filteredOrdersByPeriod, selectedPeriod).revenueGrowthRate}%
                </p>
              </div>
              <div className="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center">
                <i className="ri-trending-up-line text-orange-600"></i>
              </div>
            </div>
          </div>
        </div>

        {/* 추가 통계 섹션 */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          {/* 픽업 시간대별 주문 분석 */}
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
              <i className="ri-store-line text-orange-500"></i>
              {getPeriodTitle('픽업 시간대별 주문')}
            </h3>
            <div className="space-y-3">
              {getPickupTimeAnalysis(filteredOrdersByPeriod).map((slot, index) => (
                <div key={index} className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">{slot.time}</span>
                  <div className="flex items-center gap-3">
                    <div className="w-24 h-2 bg-gray-200 rounded-full">
                      <div 
                        className="h-2 bg-orange-500 rounded-full transition-all duration-300"
                        style={{ width: `${getPickupTimeAnalysis(filteredOrdersByPeriod).length > 0 ? (slot.orders / Math.max(...getPickupTimeAnalysis(filteredOrdersByPeriod).map(s => s.orders))) * 100 : 0}%` }}
                      ></div>
                    </div>
                    <span className="text-sm font-medium text-gray-800 w-8 text-right">{slot.orders}건</span>
                  </div>
                </div>
              ))}
              {getPickupTimeAnalysis(filteredOrdersByPeriod).length === 0 && (
                <div className="text-center text-gray-500 py-4">
                  <i className="ri-store-line text-2xl mb-2"></i>
                  <p className="text-sm">픽업 주문이 없습니다</p>
                </div>
              )}
            </div>
          </div>

          {/* 배달 시간대별 주문 분석 */}
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
              <i className="ri-truck-line text-orange-500"></i>
              {getPeriodTitle('배달 시간대별 주문')}
            </h3>
            <div className="space-y-3">
              {getDeliveryTimeAnalysis(filteredOrdersByPeriod).map((slot, index) => (
                <div key={index} className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">{slot.time}</span>
                  <div className="flex items-center gap-3">
                    <div className="w-24 h-2 bg-gray-200 rounded-full">
                      <div 
                        className="h-2 bg-orange-500 rounded-full transition-all duration-300"
                        style={{ width: `${getDeliveryTimeAnalysis(filteredOrdersByPeriod).length > 0 ? (slot.orders / Math.max(...getDeliveryTimeAnalysis(filteredOrdersByPeriod).map(s => s.orders))) * 100 : 0}%` }}
                      ></div>
                    </div>
                    <span className="text-sm font-medium text-gray-800 w-8 text-right">{slot.orders}건</span>
                  </div>
                </div>
              ))}
              {getDeliveryTimeAnalysis(filteredOrdersByPeriod).length === 0 && (
                <div className="text-center text-gray-500 py-4">
                  <i className="ri-truck-line text-2xl mb-2"></i>
                  <p className="text-sm">배달 주문이 없습니다</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* 요일별 성과 */}
        <div className="bg-white rounded-lg p-6 shadow-sm mb-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <i className="ri-calendar-line text-orange-500"></i>
            요일별 성과 (전체 기간)
          </h3>
          <div className="grid grid-cols-7 gap-2">
            {getWeeklyAnalysis(orders).map((day, index) => (
              <div key={index} className="text-center">
                <div className="text-xs text-gray-500 mb-1">{day.name}</div>
                <div className="text-lg font-bold text-gray-800">{day.orders}</div>
                <div className="text-xs text-gray-500">{day.revenue.toLocaleString()}원</div>
                <div className="w-full h-1 bg-gray-200 rounded-full mt-2">
                  <div 
                    className="h-1 bg-orange-500 rounded-full transition-all duration-300"
                    style={{ width: `${getWeeklyAnalysis(orders).length > 0 ? (day.orders / Math.max(...getWeeklyAnalysis(orders).map(d => d.orders))) * 100 : 0}%` }}
                  ></div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* 인기 메뉴 */}
        <div className="bg-white rounded-lg p-4 shadow-sm">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">{getPeriodTitle('인기 메뉴')}</h3>
          <div className="space-y-3">
            {popularMenus.length > 0 ? (
              popularMenus.map((menu, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center">
                    <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center mr-3">
                      <span className="text-orange-600 font-bold text-sm">#{index + 1}</span>
                    </div>
                    <span className="text-gray-800 font-medium">{menu.name}</span>
                  </div>
                  <div className="flex items-center">
                    <span className="text-sm font-semibold text-orange-600 bg-orange-100 px-2 py-1 rounded-full">
                      {menu.count}개
                    </span>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center text-gray-500 py-8">
                <i className="ri-restaurant-line text-4xl mb-3 text-gray-300"></i>
                <p className="text-lg">주문된 메뉴가 없습니다</p>
                <p className="text-sm">선택한 기간에 주문된 메뉴가 없습니다</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}